-- SafeLoop V1.0 Database Schema
-- Medical/Safety Alert System for Elderly and Vulnerable Family Members
-- Platform supports registered devices (Apple Watch), Caregivers (Mobile App), and Caregiver Admins

-- Enable necessary extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- =============================================
-- CORE ORGANIZATIONAL STRUCTURE
-- =============================================

-- SafeLoop Accounts: Top-level organizational accounts created by Caregiver Admins
CREATE TABLE safeloop_accounts (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    account_name TEXT NOT NULL,
    created_by UUID NOT NULL, -- References the Caregiver Admin who created this account
    subscription_status TEXT CHECK (subscription_status IN ('active', 'suspended', 'cancelled')) DEFAULT 'active',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Users: Platform users (Caregivers and Caregiver Admins only - Wearers are not authenticated users)
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    auth_user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    safeloop_account_id UUID REFERENCES safeloop_accounts(id) ON DELETE CASCADE,
    email TEXT NOT NULL,
    display_name TEXT,
    phone_number TEXT,
    user_type TEXT CHECK (user_type IN ('caregiver', 'caregiver_admin')) NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    profile_image_url TEXT,
    timezone TEXT DEFAULT 'UTC',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(auth_user_id),
    UNIQUE(safeloop_account_id, email) -- Each email can only be used once per SafeLoop account
);

-- =============================================
-- WEARER & DEVICE DATA
-- =============================================

-- Wearers: People who wear the Apple Watch (not authenticated users, just registered profiles)
CREATE TABLE wearers (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    safeloop_account_id UUID REFERENCES safeloop_accounts(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    date_of_birth DATE,
    gender TEXT CHECK (gender IN ('male', 'female', 'other', 'prefer_not_to_say')),
    medical_conditions TEXT[], -- Array of medical conditions
    medications TEXT[], -- Array of current medications
    allergies TEXT[], -- Array of known allergies
    emergency_notes TEXT, -- Special instructions for emergencies
    emergency_contact_name TEXT,
    emergency_contact_phone TEXT,
    emergency_contact_relationship TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Apple Watch Devices: Registered devices with their 7-digit codes
CREATE TABLE devices (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    device_uuid TEXT UNIQUE NOT NULL, -- UUID generated by the Apple Watch
    seven_digit_code TEXT UNIQUE NOT NULL, -- 7-digit code shown on watch for registration
    wearer_id UUID REFERENCES wearers(id) ON DELETE SET NULL,
    device_model TEXT,
    os_version TEXT,
    app_version TEXT,
    battery_level INTEGER CHECK (battery_level >= 0 AND battery_level <= 100),
    last_seen TIMESTAMP WITH TIME ZONE,
    is_verified BOOLEAN DEFAULT FALSE, -- Whether the device has been verified by admin
    registration_date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Wearer Settings: Configuration options per wearer (moved from account level)
CREATE TABLE wearer_settings (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    wearer_id UUID REFERENCES wearers(id) ON DELETE CASCADE,
    notification_priority_order TEXT[] DEFAULT ARRAY[]::TEXT[], -- Array of user IDs in priority order
    alert_all_caregivers_immediately BOOLEAN DEFAULT TRUE, -- If false, use priority order with delays
    escalation_delay_minutes INTEGER DEFAULT 5, -- Minutes to wait before escalating to next caregiver
    auto_resolve_after_hours INTEGER DEFAULT 24, -- Auto-resolve help requests after X hours
    allow_wearer_to_cancel BOOLEAN DEFAULT TRUE, -- Whether wearers can cancel their own help requests
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(wearer_id)
);

-- =============================================
-- CAREGIVER-WEARER RELATIONSHIPS
-- =============================================

-- Many-to-many relationship between caregivers and wearers
CREATE TABLE caregiver_wearer_assignments (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    caregiver_user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    wearer_id UUID REFERENCES wearers(id) ON DELETE CASCADE,
    relationship_type TEXT CHECK (relationship_type IN (
        'family', 'spouse', 'child', 'parent', 'sibling', 'friend',
        'primary_caregiver', 'backup_caregiver', 'medical_professional',
        'service_provider', 'emergency_contact'
    )),
    is_primary BOOLEAN DEFAULT FALSE,
    is_emergency_contact BOOLEAN DEFAULT FALSE,
    notes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(caregiver_user_id, wearer_id)
);

-- =============================================
-- INVITATION & ACCESS MANAGEMENT
-- =============================================

-- Caregiver Invitations: Email invitations sent by Caregiver Admins
CREATE TABLE caregiver_invitations (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    safeloop_account_id UUID REFERENCES safeloop_accounts(id) ON DELETE CASCADE,
    invited_by UUID REFERENCES users(id) ON DELETE CASCADE,
    email TEXT NOT NULL,
    invitation_token TEXT UNIQUE NOT NULL,
    status TEXT CHECK (status IN ('pending', 'accepted', 'expired', 'cancelled')) DEFAULT 'pending',
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
    accepted_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(safeloop_account_id, email) -- Prevent duplicate invitations per account
);

-- =============================================
-- EMERGENCY & HELP REQUESTS
-- =============================================

-- Help Requests: Emergency alerts from wearers (fall detection or manual requests)
CREATE TABLE help_requests (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    wearer_id UUID REFERENCES wearers(id) ON DELETE CASCADE,
    device_id UUID REFERENCES devices(id) ON DELETE SET NULL,
    request_type TEXT CHECK (request_type IN ('manual_request', 'fall')) NOT NULL,
    event_status TEXT CHECK (event_status IN ('active', 'responded_to', 'resolved', 'false_alarm')) DEFAULT 'active',
    fall_response TEXT CHECK (fall_response IN ('confirmed', 'unresponsive')) NULL, -- Only for fall requests
    location_latitude DECIMAL(10, 8),
    location_longitude DECIMAL(11, 8),
    location_accuracy DECIMAL(10, 2), -- GPS accuracy in meters
    location_timestamp TIMESTAMP WITH TIME ZONE,
    responded_by UUID REFERENCES users(id), -- Which caregiver responded first
    responded_at TIMESTAMP WITH TIME ZONE,
    resolved_at TIMESTAMP WITH TIME ZONE,
    notes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =============================================
-- NOTIFICATIONS & COMMUNICATIONS
-- =============================================

-- System Notifications: Alerts sent to caregivers about help requests
CREATE TABLE notifications (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    recipient_user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    wearer_id UUID REFERENCES wearers(id) ON DELETE CASCADE,
    help_request_id UUID REFERENCES help_requests(id) ON DELETE CASCADE,
    notification_type TEXT CHECK (notification_type IN (
        'fall_detected', 'manual_help_request', 'help_request_responded', 
        'help_request_resolved', 'device_offline', 'low_battery'
    )) NOT NULL,
    title TEXT NOT NULL,
    message TEXT NOT NULL,
    priority TEXT CHECK (priority IN ('low', 'medium', 'high', 'critical')) DEFAULT 'high',
    is_read BOOLEAN DEFAULT FALSE,
    is_delivered BOOLEAN DEFAULT FALSE,
    delivered_at TIMESTAMP WITH TIME ZONE,
    read_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Phone Call Logs: Track direct calls initiated between caregivers and wearers
CREATE TABLE call_logs (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    help_request_id UUID REFERENCES help_requests(id) ON DELETE SET NULL,
    caller_user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    wearer_id UUID REFERENCES wearers(id) ON DELETE CASCADE,
    wearer_phone_number TEXT, -- Phone number called (since wearers don't have user accounts)
    call_duration_seconds INTEGER,
    call_status TEXT CHECK (call_status IN ('initiated', 'answered', 'missed', 'busy', 'failed')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =============================================
-- SYSTEM CONFIGURATION & PREFERENCES
-- =============================================

-- User Notification Preferences
CREATE TABLE notification_preferences (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    push_notifications BOOLEAN DEFAULT TRUE,
    sms_notifications BOOLEAN DEFAULT FALSE,
    email_notifications BOOLEAN DEFAULT TRUE,
    emergency_alerts BOOLEAN DEFAULT TRUE,
    fall_alerts BOOLEAN DEFAULT TRUE,
    device_status_alerts BOOLEAN DEFAULT TRUE,
    quiet_hours_start TIME, -- No notifications during these hours
    quiet_hours_end TIME,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(user_id)
);

-- System Configuration: Platform-wide settings
CREATE TABLE system_config (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    config_key TEXT UNIQUE NOT NULL,
    config_value JSONB,
    description TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =============================================
-- INDEXES FOR PERFORMANCE
-- =============================================

-- Core relationship indexes
CREATE INDEX idx_users_auth_user_id ON users(auth_user_id);
CREATE INDEX idx_users_safeloop_account_id ON users(safeloop_account_id);
CREATE INDEX idx_users_user_type ON users(user_type);
CREATE INDEX idx_wearers_safeloop_account_id ON wearers(safeloop_account_id);
CREATE INDEX idx_devices_wearer_id ON devices(wearer_id);
CREATE INDEX idx_devices_seven_digit_code ON devices(seven_digit_code);
CREATE INDEX idx_devices_is_verified ON devices(is_verified);

-- Caregiver-wearer relationships
CREATE INDEX idx_caregiver_wearer_assignments_caregiver ON caregiver_wearer_assignments(caregiver_user_id);
CREATE INDEX idx_caregiver_wearer_assignments_wearer ON caregiver_wearer_assignments(wearer_id);

-- Help requests and notifications
CREATE INDEX idx_help_requests_wearer_id ON help_requests(wearer_id);
CREATE INDEX idx_help_requests_event_status ON help_requests(event_status);
CREATE INDEX idx_help_requests_created_at ON help_requests(created_at DESC);
CREATE INDEX idx_notifications_recipient_user_id ON notifications(recipient_user_id);
CREATE INDEX idx_notifications_is_read ON notifications(is_read);
CREATE INDEX idx_notifications_help_request_id ON notifications(help_request_id);

-- Invitations
CREATE INDEX idx_caregiver_invitations_safeloop_account_id ON caregiver_invitations(safeloop_account_id);
CREATE INDEX idx_caregiver_invitations_email ON caregiver_invitations(email);
CREATE INDEX idx_caregiver_invitations_token ON caregiver_invitations(invitation_token);
CREATE INDEX idx_caregiver_invitations_status ON caregiver_invitations(status);

-- =============================================
-- ROW LEVEL SECURITY POLICIES
-- =============================================

-- Enable RLS on all tables
ALTER TABLE safeloop_accounts ENABLE ROW LEVEL SECURITY;
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE wearers ENABLE ROW LEVEL SECURITY;
ALTER TABLE wearer_settings ENABLE ROW LEVEL SECURITY;
ALTER TABLE devices ENABLE ROW LEVEL SECURITY;
ALTER TABLE caregiver_wearer_assignments ENABLE ROW LEVEL SECURITY;
ALTER TABLE caregiver_invitations ENABLE ROW LEVEL SECURITY;
ALTER TABLE help_requests ENABLE ROW LEVEL SECURITY;
ALTER TABLE notifications ENABLE ROW LEVEL SECURITY;
ALTER TABLE call_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE notification_preferences ENABLE ROW LEVEL SECURITY;

-- Helper function to get current user's SafeLoop account ID
CREATE OR REPLACE FUNCTION get_user_safeloop_account_id() RETURNS UUID AS $$
BEGIN
    RETURN (SELECT safeloop_account_id FROM users WHERE auth_user_id = auth.uid());
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Helper function to check if current user is a caregiver admin
CREATE OR REPLACE FUNCTION is_caregiver_admin() RETURNS BOOLEAN AS $$
BEGIN
    RETURN EXISTS (
        SELECT 1 FROM users 
        WHERE auth_user_id = auth.uid() AND user_type = 'caregiver_admin'
    );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Policies for safeloop_accounts table
CREATE POLICY "Users can view their own SafeLoop account" ON safeloop_accounts
    FOR SELECT USING (id = get_user_safeloop_account_id());

CREATE POLICY "Caregiver admins can update their SafeLoop account" ON safeloop_accounts
    FOR UPDATE USING (id = get_user_safeloop_account_id() AND is_caregiver_admin());

-- Policies for users table  
CREATE POLICY "Users can view others in their SafeLoop account" ON users
    FOR SELECT USING (safeloop_account_id = get_user_safeloop_account_id());

CREATE POLICY "Users can update their own profile" ON users
    FOR UPDATE USING (auth_user_id = auth.uid());

CREATE POLICY "Caregiver admins can update users in their account" ON users
    FOR UPDATE USING (
        safeloop_account_id = get_user_safeloop_account_id() AND is_caregiver_admin()
    );

-- Policies for wearers table
CREATE POLICY "Users can view wearers in their SafeLoop account" ON wearers
    FOR SELECT USING (safeloop_account_id = get_user_safeloop_account_id());

CREATE POLICY "Caregiver admins can manage wearers in their account" ON wearers
    FOR ALL USING (safeloop_account_id = get_user_safeloop_account_id() AND is_caregiver_admin());

-- Policies for devices table
CREATE POLICY "Users can view devices for wearers in their account" ON devices
    FOR SELECT USING (
        wearer_id IN (
            SELECT id FROM wearers WHERE safeloop_account_id = get_user_safeloop_account_id()
        )
    );

CREATE POLICY "Caregiver admins can manage devices in their account" ON devices
    FOR ALL USING (
        wearer_id IN (
            SELECT id FROM wearers WHERE safeloop_account_id = get_user_safeloop_account_id()
        ) AND is_caregiver_admin()
    );

-- Policies for help_requests table
CREATE POLICY "Users can view help requests for wearers they're assigned to" ON help_requests
    FOR SELECT USING (
        wearer_id IN (
            SELECT cwa.wearer_id FROM caregiver_wearer_assignments cwa
            JOIN users u ON u.id = cwa.caregiver_user_id
            WHERE u.auth_user_id = auth.uid()
            UNION
            -- Caregiver admins can see all help requests in their account
            SELECT w.id FROM wearers w
            WHERE w.safeloop_account_id = get_user_safeloop_account_id() AND is_caregiver_admin()
        )
    );

CREATE POLICY "Caregivers can update help request status for their wearers" ON help_requests
    FOR UPDATE USING (
        wearer_id IN (
            SELECT cwa.wearer_id FROM caregiver_wearer_assignments cwa
            JOIN users u ON u.id = cwa.caregiver_user_id
            WHERE u.auth_user_id = auth.uid()
            UNION
            -- Caregiver admins can update all help requests in their account
            SELECT w.id FROM wearers w
            WHERE w.safeloop_account_id = get_user_safeloop_account_id() AND is_caregiver_admin()
        )
    );

-- Policies for notifications table
CREATE POLICY "Users can view their own notifications" ON notifications
    FOR SELECT USING (
        recipient_user_id IN (
            SELECT id FROM users WHERE auth_user_id = auth.uid()
        )
    );

CREATE POLICY "Users can update their own notifications" ON notifications
    FOR UPDATE USING (
        recipient_user_id IN (
            SELECT id FROM users WHERE auth_user_id = auth.uid()
        )
    );

-- =============================================
-- FUNCTIONS FOR CORE OPERATIONS
-- =============================================

-- Function to create a SafeLoop account with Caregiver Admin user
CREATE OR REPLACE FUNCTION create_safeloop_account(
    p_account_name TEXT,
    p_admin_email TEXT,
    p_admin_display_name TEXT DEFAULT NULL,
    p_admin_phone TEXT DEFAULT NULL
) RETURNS UUID AS $$
DECLARE
    account_id UUID;
    admin_user_id UUID;
BEGIN
    -- Create the SafeLoop account
    INSERT INTO safeloop_accounts (account_name, created_by)
    VALUES (p_account_name, auth.uid())
    RETURNING id INTO account_id;
    
    -- Create the Caregiver Admin user
    INSERT INTO users (auth_user_id, safeloop_account_id, email, display_name, phone_number, user_type)
    VALUES (auth.uid(), account_id, p_admin_email, p_admin_display_name, p_admin_phone, 'caregiver_admin')
    RETURNING id INTO admin_user_id;
    
    -- Update the account with the admin user ID
    UPDATE safeloop_accounts SET created_by = admin_user_id WHERE id = account_id;
    
    -- Create default notification preferences for admin
    INSERT INTO notification_preferences (user_id) VALUES (admin_user_id);
    
    RETURN account_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to add a wearer to a SafeLoop account
CREATE OR REPLACE FUNCTION add_wearer(
    p_name TEXT,
    p_safeloop_account_id UUID DEFAULT NULL,
    p_date_of_birth DATE DEFAULT NULL,
    p_emergency_contact_name TEXT DEFAULT NULL,
    p_emergency_contact_phone TEXT DEFAULT NULL
) RETURNS UUID AS $$
DECLARE
    wearer_id UUID;
    account_id UUID;
BEGIN
    -- Use provided account ID or get from current user
    account_id := COALESCE(p_safeloop_account_id, get_user_safeloop_account_id());
    
    -- Create wearer
    INSERT INTO wearers (
        safeloop_account_id,
        name,
        date_of_birth,
        emergency_contact_name,
        emergency_contact_phone
    )
    VALUES (
        account_id,
        p_name,
        p_date_of_birth,
        p_emergency_contact_name,
        p_emergency_contact_phone
    )
    RETURNING id INTO wearer_id;
    
    -- Create default wearer settings
    INSERT INTO wearer_settings (wearer_id) VALUES (wearer_id);
    
    RETURN wearer_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to register a device with 7-digit code
CREATE OR REPLACE FUNCTION register_device(
    p_device_uuid TEXT,
    p_seven_digit_code TEXT
) RETURNS UUID AS $$
DECLARE
    device_id UUID;
BEGIN
    INSERT INTO devices (device_uuid, seven_digit_code)
    VALUES (p_device_uuid, p_seven_digit_code)
    ON CONFLICT (device_uuid) DO UPDATE SET
        seven_digit_code = EXCLUDED.seven_digit_code,
        updated_at = NOW()
    RETURNING id INTO device_id;
    
    RETURN device_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to verify and assign device to wearer
CREATE OR REPLACE FUNCTION verify_device(
    p_seven_digit_code TEXT,
    p_wearer_id UUID
) RETURNS BOOLEAN AS $$
DECLARE
    device_count INTEGER;
BEGIN
    -- Check if the device exists and is unassigned
    SELECT COUNT(*) INTO device_count
    FROM devices 
    WHERE seven_digit_code = p_seven_digit_code 
    AND (wearer_id IS NULL OR is_verified = FALSE);
    
    IF device_count = 0 THEN
        RETURN FALSE;
    END IF;
    
    -- Assign the device to the wearer and mark as verified
    UPDATE devices 
    SET wearer_id = p_wearer_id,
        is_verified = TRUE,
        updated_at = NOW()
    WHERE seven_digit_code = p_seven_digit_code;
    
    RETURN TRUE;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to create caregiver invitation
CREATE OR REPLACE FUNCTION invite_caregiver(
    p_email TEXT,
    p_safeloop_account_id UUID DEFAULT NULL
) RETURNS UUID AS $$
DECLARE
    invitation_id UUID;
    account_id UUID;
    invitation_token TEXT;
BEGIN
    -- Use provided account ID or get from current user
    account_id := COALESCE(p_safeloop_account_id, get_user_safeloop_account_id());
    
    -- Generate unique invitation token
    invitation_token := encode(digest(p_email || account_id::TEXT || NOW()::TEXT, 'sha256'), 'hex');
    
    -- Create invitation
    INSERT INTO caregiver_invitations (
        safeloop_account_id, 
        invited_by, 
        email, 
        invitation_token,
        expires_at
    )
    VALUES (
        account_id,
        (SELECT id FROM users WHERE auth_user_id = auth.uid()),
        p_email,
        invitation_token,
        NOW() + INTERVAL '7 days'
    )
    RETURNING id INTO invitation_id;
    
    RETURN invitation_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to accept caregiver invitation
CREATE OR REPLACE FUNCTION accept_caregiver_invitation(
    p_invitation_token TEXT,
    p_email TEXT,
    p_display_name TEXT DEFAULT NULL,
    p_phone_number TEXT DEFAULT NULL
) RETURNS UUID AS $$
DECLARE
    invitation_record RECORD;
    new_user_id UUID;
BEGIN
    -- Get invitation details
    SELECT * INTO invitation_record
    FROM caregiver_invitations
    WHERE invitation_token = p_invitation_token
    AND email = p_email
    AND status = 'pending'
    AND expires_at > NOW();
    
    IF NOT FOUND THEN
        RAISE EXCEPTION 'Invalid or expired invitation token';
    END IF;
    
    -- Create caregiver user
    INSERT INTO users (
        auth_user_id, 
        safeloop_account_id, 
        email, 
        display_name, 
        phone_number, 
        user_type
    )
    VALUES (
        auth.uid(),
        invitation_record.safeloop_account_id,
        p_email,
        p_display_name,
        p_phone_number,
        'caregiver'
    )
    RETURNING id INTO new_user_id;
    
    -- Create default notification preferences
    INSERT INTO notification_preferences (user_id) VALUES (new_user_id);
    
    -- Mark invitation as accepted
    UPDATE caregiver_invitations
    SET status = 'accepted',
        accepted_at = NOW()
    WHERE id = invitation_record.id;
    
    RETURN new_user_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to assign caregiver to wearer
CREATE OR REPLACE FUNCTION assign_caregiver_to_wearer(
    p_caregiver_user_id UUID,
    p_wearer_id UUID,
    p_relationship_type TEXT DEFAULT 'family',
    p_is_primary BOOLEAN DEFAULT FALSE,
    p_is_emergency_contact BOOLEAN DEFAULT FALSE
) RETURNS UUID AS $$
DECLARE
    assignment_id UUID;
BEGIN
    INSERT INTO caregiver_wearer_assignments (
        caregiver_user_id,
        wearer_id,
        relationship_type,
        is_primary,
        is_emergency_contact
    )
    VALUES (
        p_caregiver_user_id,
        p_wearer_id,
        p_relationship_type,
        p_is_primary,
        p_is_emergency_contact
    )
    ON CONFLICT (caregiver_user_id, wearer_id) DO UPDATE SET
        relationship_type = EXCLUDED.relationship_type,
        is_primary = EXCLUDED.is_primary,
        is_emergency_contact = EXCLUDED.is_emergency_contact
    RETURNING id INTO assignment_id;
    
    RETURN assignment_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to create help request
CREATE OR REPLACE FUNCTION create_help_request(
    p_device_uuid TEXT,
    p_request_type TEXT,
    p_location_lat DECIMAL DEFAULT NULL,
    p_location_lng DECIMAL DEFAULT NULL,
    p_location_accuracy DECIMAL DEFAULT NULL,
    p_fall_response TEXT DEFAULT NULL
) RETURNS UUID AS $$
DECLARE
    request_id UUID;
    wearer_record RECORD;
    device_id UUID;
BEGIN
    -- Get device and wearer information
    SELECT d.id, d.wearer_id, w.name, w.safeloop_account_id
    INTO device_id, wearer_record.wearer_id, wearer_record.name, wearer_record.account_id
    FROM devices d
    JOIN wearers w ON w.id = d.wearer_id
    WHERE d.device_uuid = p_device_uuid AND d.is_verified = TRUE;
    
    IF NOT FOUND THEN
        RAISE EXCEPTION 'Device not found or not verified';
    END IF;
    
    -- Create help request
    INSERT INTO help_requests (
        wearer_id,
        device_id,
        request_type,
        location_latitude,
        location_longitude,
        location_accuracy,
        location_timestamp,
        fall_response
    )
    VALUES (
        wearer_record.wearer_id,
        device_id,
        p_request_type,
        p_location_lat,
        p_location_lng,
        p_location_accuracy,
        NOW(),
        p_fall_response
    )
    RETURNING id INTO request_id;
    
    -- Create notifications for assigned caregivers
    INSERT INTO notifications (recipient_user_id, wearer_id, help_request_id, notification_type, title, message, priority)
    SELECT 
        cwa.caregiver_user_id,
        wearer_record.wearer_id,
        request_id,
        CASE 
            WHEN p_request_type = 'fall' THEN 'fall_detected'
            ELSE 'manual_help_request'
        END,
        CASE 
            WHEN p_request_type = 'fall' THEN 'Fall Detected'
            ELSE 'Help Requested'
        END,
        CASE 
            WHEN p_request_type = 'fall' THEN 'A fall has been detected for ' || wearer_record.name || '. Please respond immediately.'
            ELSE wearer_record.name || ' has requested help. Please respond immediately.'
        END,
        'critical'
    FROM caregiver_wearer_assignments cwa
    WHERE cwa.wearer_id = wearer_record.wearer_id;
    
    RETURN request_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- =============================================
-- TRIGGERS FOR AUTOMATIC UPDATES
-- =============================================

-- Trigger to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply the trigger to relevant tables
CREATE TRIGGER update_safeloop_accounts_updated_at 
    BEFORE UPDATE ON safeloop_accounts 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_users_updated_at 
    BEFORE UPDATE ON users 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_wearers_updated_at 
    BEFORE UPDATE ON wearers 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_wearer_settings_updated_at 
    BEFORE UPDATE ON wearer_settings 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_devices_updated_at 
    BEFORE UPDATE ON devices 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_notification_preferences_updated_at 
    BEFORE UPDATE ON notification_preferences 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- =============================================
-- SEED DATA FOR DEVELOPMENT
-- =============================================

-- Insert system configuration
INSERT INTO system_config (config_key, config_value, description) VALUES
('invitation_expiry_days', '7', 'Number of days before caregiver invitations expire'),
('help_request_auto_resolve_hours', '24', 'Hours after which unresolved help requests are auto-resolved'),
('device_offline_threshold_minutes', '30', 'Minutes before marking device as offline'),
('battery_low_threshold', '20', 'Battery percentage to trigger low battery alerts');